openapi: 3.0.0

info:
  title: Arput API
  description: ArputのAPI仕様書です。
  version: 1.0.0

servers:
  - url: "http://localhost:5050"
    description: "開発サーバ"
  - url: "http://localhost:8003"
    description: "モックサーバ"

tags:
  - name: "users"
    description: "ユーザに関する操作"
  - name: "communities"
    description: "コミュニティに関する操作"
  - name: "articles"
    description: "記事に関する操作"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization

paths:
  "/user/create":
    post:
      tags: ["users"]
      summary: "ユーザの新規作成"
      deprecated: false
      requestBody:
        description: "ユーザの新規作成に必要な情報"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "ユーザの名前"
                  example: "arput"
                mailAddress:
                  type: string
                  description: "ユーザのメールアドレス"
                  example: "test-swagger@ado.com"
                password:
                  type: string
                  description: "ユーザのパスワード"
                  example: "password"
                passwordConfirmation:
                  type: string
                  description: "ユーザのパスワード(確認用)"
                  example: "password"
                schoolName:
                  type: string
                  description: "ユーザの所属する学校名"
                  example: "金沢工業大学"
                bio:
                  type: string
                  description: "ユーザの自己紹介"
                  example: "こんにちは！"
      responses:
        "200":
          description: "ユーザの新規作成に成功した場合"
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    description: "ユーザID"
                    example: "1"
  "/user/login":
    post:
      tags: ["users"]
      summary: "ユーザのログイン"
      deprecated: false
      requestBody:
        description: "ユーザのログインに必要な情報"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mailAddress:
                  type: string
                  description: "ユーザのメールアドレス"
                  example: "test-swagger@ado.com"
                password:
                  type: string
                  description: "ユーザのパスワード"
                  example: "password"
      responses:
        "200":
          description: "ユーザのログインに成功した場合"
          headers:
            X-AUTH-TOKEN:
              schema:
                type: string
                description: "認証トークン"
                example: "token"
  "/user/logout":
    get:
      tags: ["users"]
      summary: "ユーザのログアウト"
      deprecated: false
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: "ユーザのログアウトに成功した場合"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "メッセージ"
                    example: "logout"
        "403":
          description: "ユーザのログアウトに失敗した場合"
  "/user/{userId}":
    get:
      summary: "ユーザの情報取得"
      tags: ["users"]
      deprecated: false
      security:
        - ApiKeyAuth: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ユーザID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "ユーザの情報取得に成功した場合"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "状態"
                    example: "SUCCESS"
                  message:
                    type: string
                    description: "メッセージ"
                    example: ""
                  data:
                    type: object
                    description: "ユーザの情報"
                    properties:
                      userId:
                        type: string
                        description: "ユーザID"
                        example: "1"
                      name:
                        type: string
                        description: "ユーザの名前"
                        example: "arput"
                      mailAddress:
                        type: string
                        description: "ユーザのメールアドレス"
                        example: "test-swagger@ado.com"
                      schoolName:
                        type: string
                        description: "ユーザの所属する学校名"
                        example: "金沢工業大学"
                      bio:
                        type: string
                        description: "ユーザの自己紹介"
                        example: "こんにちは！"
    put:
      tags: ["users"]
      summary: "ユーザの情報更新"
      deprecated: false
      security:
        - ApiKeyAuth: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ユーザID"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "ユーザの情報更新に必要な情報"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "ユーザの名前"
                  example: "arput"
                mailAddress:
                  type: string
                  description: "ユーザのメールアドレス"
                  example: "test-swagger@ado.com"
                password:
                  type: string
                  description: "ユーザのパスワード"
                  example: "password"
                schoolName:
                  type: string
                  description: "ユーザの所属する学校名"
                  example: "金沢工業大学"
                bio:
                  type: string
                  description: "ユーザの自己紹介"
                  example: "こんにちは！"
      responses:
        "200":
          description: "ユーザの情報更新に成功した場合"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "状態"
                    example: "SUCCESS"
        "403":
          description: "ユーザの情報更新に失敗した場合"
    delete:
      summary: "ユーザの削除"
      tags: ["users"]
      deprecated: false
      security:
        - ApiKeyAuth: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ユーザID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "ユーザの削除に成功した場合"
  "/user/{userId}/community/":
    post:
      tags: ["communities"]
      summary: "コミュニティの新規作成"
      deprecated: false
      security:
        - ApiKeyAuth: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ユーザID"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "コミュニティの新規作成に必要な情報"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "コミュニティの名前"
                  example: "テストコミュニティ"
                description:
                  type: string
                  description: "コミュニティの説明"
                  example: "金工大生限定コミュニティです"
      responses:
        "200":
          description: "コミュニティの新規作成に成功した場合"
    get:
      tags: ["communities"]
      summary: "ユーザが参加しているコミュニティの一覧を取得"
      deprecated: false
      security:
        - ApiKeyAuth: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ユーザID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "コミュニティの一覧取得に成功した場合"
  "/user/{userId}/community/dashboard":
    get:
      tags: ["communities"]
      summary: "現在ユーザが登録したコミュニティの一覧を取得"
      deprecated: false
      security:
        - ApiKeyAuth: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ユーザID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "コミュニティの一覧取得に成功した場合"
  "/user/{userId}/community/{communityId}":
    put:
      tags: ["communities"]
      summary: "コミュニティの情報更新"
      deprecated: false
      security:
        - ApiKeyAuth: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ユーザID"
          required: true
          schema:
            type: "string"
        - name: "communityId"
          in: "path"
          description: "コミュニティID"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "コミュニティの情報更新に必要な情報"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "コミュニティの名前"
                  example: "テストコミュニティ"
                description:
                  type: string
                  description: "コミュニティの説明"
                  example: "金工大生限定コミュニティです"
      responses:
        "200":
          description: "コミュニティの情報更新に成功した場合"
    delete:
      tags: ["communities"]
      summary: "コミュニティの削除"
      deprecated: false
      security:
        - ApiKeyAuth: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ユーザID"
          required: true
          schema:
            type: "string"
        - name: "communityId"
          in: "path"
          description: "コミュニティID"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "コミュニティの削除に成功した場合"
  "/user/{userId}/article/":
    "post":
      tags: ["articles"]
      summary: "記事の新規作成"
      deprecated: false
      security:
        - ApiKeyAuth: []
      parameters:
        - name: "userId"
          in: "path"
          description: "ユーザID"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "記事の新規作成に必要な情報"
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: "記事のタイトル"
                  example: "テスト記事"
                content:
                  type: string
                  description: "記事の内容"
                  example: "テスト記事です"
      responses:
        "200":
          description: "記事の新規作成に成功した場合"
